Seguendo sempre lo stile del sito volevo aggiungere in alto il nel men√π dopo analisi phising un nuovo bottone che √® malware analysis,

Al suo interno devo dividere le sezioni per Analisi Statica,Analisi dinamica, Analisi statica avanzata, analisi dinamica avanzata, analisi file excel, analisi file word e analisi file pdf

Per ora ho pronti analisi statica, analisi file excel, analisi file word e analisi file pdf, ecco a te, eventualmente correggi se qualcosa √® scritta in maniera errata

Excel

1. unzip file.xlsm (estraiamo tutti i file e le cartelle che sono compressi all‚Äôinterno del file `.xlsm`)

Dentro vedrai cartelle come:

- `xl/` ‚Äî contiene fogli di lavoro, macro (`vbaProject.bin`), e altro
    
- `docProps/` ‚Äî propriet√† del documento
    
- `_rels/` ‚Äî file di relazioni tra componenti
    
- `[Content_Types].xml` ‚Äî informazioni sul tipo di contenuto

2. oledump.py file.xsml (utile per identificare e analizzare macro VBA o eventuali contenuti malevoli all‚Äôinterno del file Excel.)

![[Pasted image 20250517165025.png]]

la M Indica un **modulo standard** VBA, cio√® un modulo contenente **codice VBA scritto dall‚Äôutente** che non √® legato a un particolare oggetto come un foglio o il workbook.

La m Indica un **modulo di classe o modulo oggetto**, ovvero un modulo VBA associato a un **oggetto specifico** nel file Excel. Es: il workbook stesso (`ThisWorkbook`)  
Questi moduli contengono codice VBA legato a eventi o comportamenti specifici di quell‚Äôoggetto, ad esempio cosa succede quando apri il foglio o il workbook

oledump.py -s 4 sampleExcelFile.xlsm (con questo comando stiamo visualizzando le stringhe di Module1)
![[Pasted image 20250517165118.png]]
Aggiungendo -S al comando si visualizza il contenuto del modulo 4 **decodificato e pi√π leggibile**, mostrando **solo le stringhe di testo** presenti nel modulo VBA, **filtrando via il codice VBA e altri dati binari**.
![[Pasted image 20250517165149.png]]

C:\Users\kali\Desktop>oledump.py -s 4 --vbadecompresscorrupt sampleExcelFile.xlsm
**`--vbadecompresscorrupt`**: √® un‚Äôopzione avanzata di oledump.py che serve per **decomprimere moduli VBA corrotti o danneggiati**.

![[Pasted image 20250517165206.png]]

Come in word anche un file Excel `.xlsx` o `.xlsm` pu√≤ puntare a un template esterno di tipo **`.xltm`**. Questo template pu√≤ essere caricato da un percorso remoto specificato all'interno del file Excel stesso. Se compromesso, pu√≤ eseguire macro malevole al momento dell'apertura.

pdf: 
python2 peepdf.py a2852936a7e33787c0ab11f346631d89.pdf

Questo comando mostra la struttura del PDF e gli oggetti contenuti, come eventuali script JavaScript malevoli.

![[Pasted image 20250517171133.png]]
Per estrarre e analizzare il contenuto di uno specifico oggetto, ad esempio l‚Äôoggetto numero 18 che contiene codice JavaScript, si usa `pdf-parser` con questi parametri:

pdf-parser -f -o 18 -d codice.js  a2852936a7e33787c0ab11f346631d89.pdf

- `-o 18`: indica l‚Äô**oggetto** del PDF da estrarre, in questo caso l‚Äôoggetto numero 18, che corrisponde al codice JavaScript sospetto.
    
- `-d codice.js`: specifica il **nome del file** dove verr√† salvato il contenuto estratto (il codice JavaScript in chiaro).
    
- `-f`: applica i **filtri di decompressione** per decodificare il contenuto (ad esempio FlateDecode, ASCIIHexDecode, ASCII85Decode, LZWDecode, RunLengthDecode), in modo da ottenere il codice leggibile e non compresso.

![[Pasted image 20250517171645.png]]



WORD:
Per quanto riguarda i documenti Word, esistono due estensioni principali: **.docx** e **.docm**.

- I file **.docx** non possono contenere macro VBA direttamente, essendo un formato "macro-free". Tuttavia, un documento `.docx` pu√≤ fare riferimento a un template esterno **.dotm** che include macro, permettendo l‚Äôesecuzione di codice VBA.
    
- Il formato **.docm**, invece, supporta direttamente macro VBA integrate nel file. Questa differenza √® importante per riconoscere potenziali rischi di sicurezza legati ai documenti Word.

## Per i file DOCM
Per analizzare le macro VBA o contenuti malevoli presenti in un file `.docm`, puoi utilizzare il comando:

oledump.py file.docm

Questo permette di identificare eventuali flussi VBA all‚Äôinterno del documento.

![[Pasted image 20250517160802.png]]
Se vuoi visualizzare il contenuto di un modulo VBA specifico (ad esempio, il flusso 3) e filtrare solo le stringhe leggibili:

oledump.py -s 3 -S 7085f3dda26b773120d4da2362f5a2e95af799dcec8ec580d36c9d77a6abda4d.docm

![[Pasted image 20250517160904.png]]

C:\Users\kali\Desktop>oledump.py -s 3 --vbadecompresscorrupt 7085f3dda26b773120d4da2362f5a2e95af799dcec8ec580d36c9d77a6abda4d.docm
**`--vbadecompresscorrupt`**: √® un‚Äôopzione avanzata di oledump.py che serve per **decomprimere moduli VBA corrotti o danneggiati**.

![[Pasted image 20250517161030.png]]


## Per i file DOC

Come spiegato all'inizio, i file `.doc` non mostrano macro direttamente tramite `oledump.py`.
![[Pasted image 20250517162502.png]]

Come si analizza un file doc:
- **Rinomina l'estensione del file da `.doc` a `.zip`.**
- 1. Apri l'archivio `.zip`.
![[Pasted image 20250517162624.png]]

3. Naviga nella directory `word -> rels`.
![[Pasted image 20250517162753.png]]
4. Nel file `settings.xml.rels`, troverai l‚Äôindirizzo del template remoto.

![[Pasted image 20250517162955.png]]

5. Analizza l‚Äô**URL presente nel target** per identificare eventuali template malevoli.
![[Pasted image 20250517163547.png]]


TIPS:
Per automatizzare l‚Äôanalisi delle macro VBA in documenti Office, un tool molto efficace √® **olevba**.

Con un semplice comando da terminale √® possibile estrarre il codice e rilevare indicatori di attivit√† sospette.  

Questo strumento √® utile per velocizzare l‚Äôanalisi di malware basato su macro.  
Ecco un esempio di comando per analizzare un file `.docm`

![[Pasted image 20250517173650.png]]
Playbook:
## RACCOLTA INFORMAZIONI (Metadata Analysis)

- **Identificazione del tipo di file**:
    
    - Esegui il comando `file <documento>` per verificare l'effettiva estensione e integrit√† del file.
        
    - Usa `exiftool <documento>` per analizzare i metadati (autore, timestamp, software di creazione).
        
- **Hashing e identificazione**:
    
    - Calcola l'hash del file con `sha256sum <documento>` per identificazioni successive.
        
    - Verifica su **VirusTotal**, **Malshare** o **Hybrid Analysis** per indicatori noti.
        

---

## 2Ô∏è‚É£ ANALISI STATICA (Static Analysis)

### üîπ PDF:

- **pdfid**: Identifica oggetti sospetti (`/JS`, `/JavaScript`, `/OpenAction`, `/AA`).
    
    - Esempio: `pdfid <documento.pdf>`
        
- **pdf-parser**: Estrae e analizza oggetti specifici.
    
    - Esempio: `pdf-parser -o 1 <documento.pdf>` per vedere l'oggetto 1.
        
- **peepdf**: GUI interattiva per navigare nel PDF.
    

### üîπ Word/Excel:

- **olevba**: Estrazione di macro VBA.
    
    - Esempio: `olevba <documento.docm>`
        
- **oledump.py**: per macro e oggetti nascosti.
    
    - Esempio: `oledump.py <documento.doc>`
    
 ANalisi statica:
 1. Trovare l'hash del file

Certutil -hashfile file.exe SHA256 (o MD5 etc)   - Per CMD

sha256sum file.exe  - per linux

2. Caricare l'hash su Virustotal
Campi da attenzionare: 
### üóÇ **Details:**

- **File Type:** Identifica se √® un eseguibile, script, documento, ecc.
    
- **File Size:** Indica se √® un payload complesso o un semplice dropper.
    
- **Compilation Date:** Verifica se √® coerente con la versione del software o se √® stata modificata.
    
- **Packer/Protector:** Controlla se √® offuscato o protetto da un packer (es. UPX, Themida, ecc.).
    
- **Import Table:** Verifica le librerie utilizzate (`kernel32.dll`, `advapi32.dll`, ecc.).
    
- **Sections:** Osserva nomi sospetti o dimensioni anomale (es. `.text`, `.data`, `.rdata`).
    
- **Digital Signature:** Se presente, verifica l'attendibilit√† e l'autenticit√†.
    

---

### üîé **Behavior:**
    
- **Registry Modifications:** Controlla se scrive chiavi persistenti, modifica chiavi di sistema o disabilita Windows Defender.
    
- **Network Communication:** Analizza chiamate HTTP/HTTPS, richieste DNS e IP sospetti.
    
- **Processes Created/Tree:** Verifica se esegue PowerShell, CMD o altri processi di sistema.
    
- **Mutexes Created:** Segnala se cerca di evitare duplicazioni sullo stesso sistema.
    

---

### üîó **Relations:**

- **Execution Files:** Verifica se √® stato scaricato da un sito malevolo o √® parte di un bundle.
    
- **Dropped Files:** Controlla eventuali file che il malware potrebbe aver rilasciato nel sistema.
    
- **Contacted IP/Domain:** Identifica connessioni a Command and Control (C2) server.
    

---

### üë• **Community:**

- **Community Analysis:** Osserva i commenti della community per intuizioni aggiuntive.
    
- **Tags:** Verifica se sono presenti tag come "Ransomware", "Trojan", "Keylogger", ecc.
    
- **Reports and Links:** Controlla eventuali link a Hybrid Analysis, Any.Run o rapporti esterni.


3. String & FLOSS: analisi delle stringhe

strings file.exe
floss file.exe 

floss √® un'evoluzione di strings, oltre alle stringhe in chiaro, **rileva e decodifica stringhe offuscate o criptate** che normalmente non sarebbero visibili con strings
![[Pasted image 20250517124433.png]]

4. Analizzare la tabella di import adress con PEView

Le **Section** rappresentano diverse aree di memoria utilizzate dal programma durante l'esecuzione. 

.text Contiene il codice eseguibile (le istruzioni del programma)

.data Area di memoria che contiene dati globali e variabili statiche

.rdata Contiene dati di sola lettura, come le stringhe costanti e le Import Table

.bss Sezione non inizializzata, usata per variabili globali non inizializzate

.idata Contiene la Import Table, con le librerie e le funzioni importate. 

.rsrc Contiene le risorse del programma, come icone, immagini, menu, e stringhe localizzate.

Inziamo con Image_SECTION_HEADER text:
- **Virtual Size:** Dimensione della sezione in memoria (RAM) quando viene caricata dal loader di Windows.
    
- **Size of Raw Data:** Dimensione effettiva della sezione nel file PE sul disco.

Quando il **Virtual Size** di una sezione √® maggiore del **Size of Raw Data**, significa che la sezione, una volta caricata in memoria, occupa pi√π spazio rispetto a quello effettivamente presente sul disco.

Questo comportamento pu√≤ essere un indicatore di vari comportamenti anomali come codice malevole o Packed Malware.
![[Pasted image 20250517124517.png]]

In Section .rdata -> Import Address_Table si trovano proprio le **Windows API** (Application Programming Interface), cio√® quelle funzioni fornite dal sistema operativo Windows per svolgere operazioni comuni, ecco alcuni esempi di windows api chiamate da un malware:
- **CreateFile** ‚Äî per creare o aprire file
    
- **WriteFile** ‚Äî per scrivere dati su file
    
- **VirtualAlloc** ‚Äî per allocare memoria in modo dinamico (es. shellcode)
    
- **CreateProcess** ‚Äî per avviare nuovi processi
    
- **Connect** ‚Äî per stabilire connessioni di rete (C2)
![[Pasted image 20250517124546.png]]
Una volta trovata la funzione e la libreria utilizzata, basta una ricerca su google per capirne il funzionamento.
![[Pasted image 20250517124609.png]]
Es InternetOpenUrlW
![[Pasted image 20250517121230.png]]

Una risorsa utile √® https://malapi.io/, che aiuta a comprendere come determinate API di Windows vengono utilizzate per attivit√† malevole.

**Come capire se un malware √® packed?** E perch√® renderlo packed?

Il packing nasconde il codice reale del malware rendendo difficile l‚Äôanalisi con strumenti automatici (antivirus, scanner statici). Il file appare ‚Äúincomprensibile‚Äù finch√© non viene eseguito e decompresso in memoria.

Il packing pu√≤ anche comprimere il malware, rendendo il file pi√π piccolo e facile da distribuire.

COme capire se un malware √® packed?
 Se il **Virtual Size** (la dimensione in memoria) √® molto pi√π grande del **Size of Raw Data** (la dimensione sul disco), questo pu√≤ indicare che la sezione contiene dati compressi o criptati, tipico di un file packed.
 
Un file packed spesso nasconde o minimizza le importazioni per evitare l‚Äôanalisi. Se vedi pochissime o nessuna funzione importata, √® sospetto.

 Se nel PE ci sono sezioni con nomi come `.upx`, `.packed`, `.crypt`, o nomi non standard, probabilmente √® packed.
 ![[Pasted image 20250517124939.png]]
Software come **PEiD**, **Detect It Easy (DIE)**, **Exeinfo PE** o **PE-bear** identificano automaticamente se un file √® packed e quale packer viene utilizzato.
![[Pasted image 20250517124908.png]]

Un tool automatizzato per l‚Äôanalisi statica √® **pestudio**.  
Esso individua automaticamente se un file √® packed o protetto da packer noti, evidenzia funzioni API potenzialmente pericolose utilizzate dal file e segnala indicatori di possibile malware, come modifiche a chiavi di registro, comunicazioni di rete sospette e firme digitali assenti o non valide.

![[Pasted image 20250517125447.png]]

Un altro tool utilizzato per l'analisi automatizzata √® **CAPA**. Questo strumento permette di identificare rapidamente le capacit√† e i comportamenti potenzialmente malevoli di un file analizzandone il codice senza eseguirlo. CAPA rileva pattern specifici nel binario, come chiamate a API di sistema, stringhe sospette e tecniche di offuscamento, fornendo un report chiaro e dettagliato sulle funzionalit√† del malware

![[Pasted image 20250517125615.png]]

![[Pasted image 20250517125856.png]]

### Checklist Analisi Statica Malware ()

-  1. Calcolare hash file (SHA256/MD5).
    
-  2. Cercare hash su VirusTotal e consultare community/security feed (inclusa intelligence software).
    
-  3. Verificare relazioni: file parent, dropped files, IP/domini contattati.
    
-  4. Estrarre stringhe con `strings` e `floss`.
    
-  5. Verificare presenza e validit√† firme digitali.
    
-  6. Controllare telemetrie dispositivo (eventi sistema, log sicurezza, EDR).
    
-  7. Analizzare struttura PE (sezioni, dimensioni, import table) con PEview o pestudio.
    
-  8. Controllare funzioni API importate potenzialmente pericolose.
    
-  9. Individuare packing/offuscamento (Virtual Size > Raw Data, nomi sezioni sospetti, entropia alta).
    
-  10. Documentare e creare report completo.